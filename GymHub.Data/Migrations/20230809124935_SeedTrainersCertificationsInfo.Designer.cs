// <auto-generated />
using System;
using GymHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymHub.Data.Migrations
{
    [DbContext(typeof(GymHubDbContext))]
    [Migration("20230809124935_SeedTrainersCertificationsInfo")]
    partial class SeedTrainersCertificationsInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GymHub.Data.Models.ActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Intensity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TraineeLevel")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("ActivitiesCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Intensity = "Low",
                            TraineeLevel = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Intensity = "Moderate",
                            TraineeLevel = "Beginner"
                        },
                        new
                        {
                            Id = 3,
                            Intensity = "Moderate",
                            TraineeLevel = "Intermediate"
                        },
                        new
                        {
                            Id = 4,
                            Intensity = "Moderate",
                            TraineeLevel = "Advanced"
                        },
                        new
                        {
                            Id = 5,
                            Intensity = "High",
                            TraineeLevel = "Intermediate"
                        },
                        new
                        {
                            Id = 6,
                            Intensity = "High",
                            TraineeLevel = "Advanced"
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba3a5230-8e32-4d72-bc27-def1a8ab665a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb9d9bc3-c148-48d7-ac27-55581fe64051",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            LastName = "Stoyanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM4tN+IjR5mNYwai+t41OPQSNcK6AZUpwoVLxIXlyT+B6ZE1TyMuM9/KhkZ2o2u6YQ==",
                            PhoneNumber = "359892334456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a1a3367-022d-4969-a374-63b39b19ad3f",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("0fa5eb44-0f0b-455c-bc32-ed60a57f875e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83abe2ba-cd77-4d38-9183-6ec77987f9da",
                            Email = "sophia.nikolova@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            LastName = "Nikolova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "SOPHIA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAiCCxi119P7Wdt5HACevTAKRJhISG5l+Mnkxp9TG2YpqF6KZdr8Vze+a8cyuxmEtQ==",
                            PhoneNumber = "359895998877",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e865714-af27-45a8-a9be-4b86b249e89b",
                            TwoFactorEnabled = false,
                            UserName = "sophia.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea4bb973-7977-455a-a92d-6a2cb1dfcca3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4adb2ede-4773-4283-8360-e22ca09e4253",
                            Email = "olivia.parker@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Olivia",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLIVIA.PARKER@GMAIL.COM",
                            NormalizedUserName = "OLIVIA.PARKER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHtfzsAaVxrwVzmZinE9tgvi9jcwvbuQNeYsjc6VSdAWUZ0h1m8qwPcd//FhC0XU+w==",
                            PhoneNumber = "447123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b39aeb0-bbc6-4c8e-9d6e-f0fd53fe0216",
                            TwoFactorEnabled = false,
                            UserName = "olivia.parker@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bcd3cb31-dc3a-4c20-ad5f-79324bb62443"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b25f6df-6efc-4d16-9ef5-08b1418f11d0",
                            Email = "alexander.angelov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alexander",
                            LastName = "Angelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDER.ANGELOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDER.ANGELOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBfG0iOA8h5kvAMERijFVoP7HqiS1qGtWCMK2RAq0vjQJuNmSXuaei2j+KhamuvHAw==",
                            PhoneNumber = "359899112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b80ebde-264f-431e-a4a6-c1589b41e616",
                            TwoFactorEnabled = false,
                            UserName = "alexander.angelov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("5f28263d-a630-4364-8267-75307568014f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efcc1d34-06e3-4a27-ac83-191f06838a61",
                            Email = "remi.leroy@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Remi",
                            LastName = "Leroy",
                            LockoutEnabled = false,
                            NormalizedEmail = "REMI.LEROY@YAHOO.COM",
                            NormalizedUserName = "REMI.LEROY@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDV+wZw8xv0hl14DORhzdJFEDQX9cLY8VPh/lLWswyo2x6ctW5YxJY9qYPM9T6ZEsg==",
                            PhoneNumber = "33612345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "886fa01d-8b34-4ab8-90c1-60dfcc8728b9",
                            TwoFactorEnabled = false,
                            UserName = "remi.leroy@yahoo.com"
                        },
                        new
                        {
                            Id = new Guid("aeba13bb-2b27-4b1b-b702-5fd482830491"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8609df25-1c9e-4633-bb76-bd3fddd98573",
                            Email = "amelie.dupont@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Amelie",
                            LastName = "Dupont",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIE.DUPONT@GMAIL.COM",
                            NormalizedUserName = "AMELIE.DUPONT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBb+L7aAA95liJYAxSbgfeFvX4kSakl/ffhxXlCs3ZEdOJ62V678ccZZsOhYyMPgkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b226ebd8-f251-4e47-8ede-01b9ae0866eb",
                            TwoFactorEnabled = false,
                            UserName = "amelie.dupont@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9f76fb38-94d6-4ba8-9069-fd078ca22ebf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a60110c-2001-4c33-ad49-b3c108102c10",
                            Email = "yana.georgieva@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Yana",
                            LastName = "Georgieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "YANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "YANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELHTCK4lvQkj+qbWISvG4lGE3xlXkucQ3QgQDx3XdNMUZ86cI4tKLUE1wrFBgg3LqQ==",
                            PhoneNumber = "35987223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60a77677-4454-4bf5-b05f-98024417f6c4",
                            TwoFactorEnabled = false,
                            UserName = "yana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("3a0c980b-98fe-4e88-a95e-8926dd775c68"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c06599b-894d-4154-b9a5-566c6d76e349",
                            Email = "ivan.petrov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN.PETROV@GMAIL.COM",
                            NormalizedUserName = "IVAN.PETROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPUoCG/lNTCHguHAzcXCCme1hosTeDQfk6/gmPEwMZr4GVeZ+cR9yv2i715XAMTqvA==",
                            PhoneNumber = "359899556677",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a4acdeb-7c12-4dc2-a027-47777ae76da9",
                            TwoFactorEnabled = false,
                            UserName = "ivan.petrov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("557c75b3-d089-46a0-9b71-c800aa685010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caa59b17-30ba-4438-8723-4beebc34208c",
                            Email = "noah.sanchez@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Noah",
                            LastName = "Sanchez",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOAH.SANCHEZ@GMAIL.COM",
                            NormalizedUserName = "NOAH.SANCHEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3myLaQis7wuEub+d6eb51OsRNv4AeG2UGivyYBq84r3cmWMufFtKF7fPkAYUEtbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fba2ef14-58cd-4af6-9e54-a7e927395d86",
                            TwoFactorEnabled = false,
                            UserName = "noah.sanchez@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("dbc5c34e-0e90-42c9-83db-9421948f8f44"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f3eb9fa-c6f4-44e7-adab-68b4d886b8cc",
                            Email = "james.turner@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            LastName = "Turner",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.TURNER@GMAIL.COM",
                            NormalizedUserName = "JAMES.TURNER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaMeejDsW7TTTRErnNkktE4HlK+xXCHgFiJZO5J7nTwJmAkFJM6myLFYSAGEoKBLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14126ad6-1c4c-4a8a-a26d-2810ec96485d",
                            TwoFactorEnabled = false,
                            UserName = "james.turner@gmail.com"
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d52ff35-fcfc-4385-ae23-a45be1db42f4"),
                            IssueDate = new DateTime(2019, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingOrganization = "Alison",
                            Name = "Internationally Accredited Diploma Certificate in Fitness"
                        },
                        new
                        {
                            Id = new Guid("abc5ab25-3e76-43cb-be4b-2b05b50e7893"),
                            IssueDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingOrganization = "Yoga Alliance Teacher Training",
                            Name = "Registered Yoga Teacher (RYT)"
                        },
                        new
                        {
                            Id = new Guid("a108e18e-436d-4b80-b651-f06dc7dfc6fd"),
                            IssueDate = new DateTime(2021, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingOrganization = "The National Academy of Sports Medicine (NASM)",
                            Name = "Personal Trainer"
                        },
                        new
                        {
                            Id = new Guid("5d8ce6bd-4def-4e06-beba-9beca0a08f94"),
                            IssueDate = new DateTime(2021, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingOrganization = "The International Sports Sciences Association (ISSA)",
                            Name = "Martial Arts Trainer"
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraineeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TraineeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96faeece-d48a-4039-ba74-48aef7c37505"),
                            TraineeId = new Guid("7cb387f1-d0c1-4be2-9cc8-31cba24fdd7c"),
                            TrainingId = new Guid("922bf694-a4e1-4fbe-b508-8cbfa836600f")
                        },
                        new
                        {
                            Id = new Guid("da72aef2-fed5-47c6-b6b4-f0433b2347fc"),
                            TraineeId = new Guid("b6830fbd-a3e8-4465-a596-04565c4568bc"),
                            TrainingId = new Guid("82a1b1c7-1b12-4973-a8c0-9720fe4255fc")
                        },
                        new
                        {
                            Id = new Guid("f2a2d524-be88-4c27-9a99-b17a33619a64"),
                            TraineeId = new Guid("b6830fbd-a3e8-4465-a596-04565c4568bc"),
                            TrainingId = new Guid("5bd931f9-f5ca-472c-8c81-9f011118c0e5")
                        },
                        new
                        {
                            Id = new Guid("91898c44-8c40-4c2f-8b4b-d2992a4166c3"),
                            TraineeId = new Guid("02f24448-29e7-48d1-ae7e-54282df6cc53"),
                            TrainingId = new Guid("17e17c3c-ba43-44bb-9fe3-8ec50c4a8dca")
                        },
                        new
                        {
                            Id = new Guid("8e03520b-84bd-4aec-a19e-b6a461a18609"),
                            TraineeId = new Guid("5546a97c-3ed4-48b7-90c7-2c0d70159e28"),
                            TrainingId = new Guid("88034cb7-c971-4520-a3a1-d48099502562")
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfMaxSpots")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("GroupActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CategoryId = 6,
                            CountOfMaxSpots = 15,
                            Description = "Cross training is a diverse workout approach that involves mixing various exercises and activities to enhance overall fitness and prevent workout plateaus. By combining cardio, strength training, and flexibility exercises, it targets multiple muscle groups and reduces the risk of overuse injuries.",
                            Name = "Cross Training"
                        },
                        new
                        {
                            Id = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CategoryId = 3,
                            CountOfMaxSpots = 10,
                            Description = "Kickboxing is a high-intensity martial art and cardio workout that combines punching, kicking, and knee strikes. It improves overall fitness, endurance, and self-defense skills while providing a fun and challenging way to burn calories and relieve stress.",
                            Name = "Kickboxing"
                        },
                        new
                        {
                            Id = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850"),
                            CategoryId = 1,
                            CountOfMaxSpots = 25,
                            Description = "Yoga is a holistic practice that unites mind, body, and spirit. It incorporates physical postures, breathing techniques, and meditation to promote flexibility, strength, and inner peace. Embracing yoga can reduce stress and foster overall well-being. Connect with yourself and experience the transformative power of yoga.",
                            Name = "Yoga"
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupActivityTrainer", b =>
                {
                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainerId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("GroupActivityTrainers");

                    b.HasData(
                        new
                        {
                            TrainerId = new Guid("7b785253-5315-49fe-9d0c-39a8935c6902"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699")
                        },
                        new
                        {
                            TrainerId = new Guid("d1079610-d657-4cea-bf9b-0fc1053a6ee8"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5")
                        },
                        new
                        {
                            TrainerId = new Guid("1495c1e6-c21d-4b6f-b64d-a47d0226f4fc"),
                            ActivityId = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850")
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraineeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TraineeId");

                    b.ToTable("GroupEnrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68cbab08-c836-4166-85cb-81caff531bc5"),
                            ScheduleId = new Guid("47d1b94a-1e4b-4ae4-986d-60298849b1c7"),
                            TraineeId = new Guid("7cb387f1-d0c1-4be2-9cc8-31cba24fdd7c")
                        },
                        new
                        {
                            Id = new Guid("1cc5bc09-2e19-49d0-b8cb-066f8b451328"),
                            ScheduleId = new Guid("6d88f805-232d-4ce4-a05f-a62da3a02474"),
                            TraineeId = new Guid("b6830fbd-a3e8-4465-a596-04565c4568bc")
                        },
                        new
                        {
                            Id = new Guid("9b9ea386-97d6-4ef1-b1f9-01d525ad9b74"),
                            ScheduleId = new Guid("abd78db4-0a0d-466c-a14d-4f1c6da8bfb0"),
                            TraineeId = new Guid("02f24448-29e7-48d1-ae7e-54282df6cc53")
                        },
                        new
                        {
                            Id = new Guid("139c5fce-bf05-47e3-8fd3-9bb4f338aeb6"),
                            ScheduleId = new Guid("1452eef9-d47f-48ce-bea6-8bc0ec775f5e"),
                            TraineeId = new Guid("5546a97c-3ed4-48b7-90c7-2c0d70159e28")
                        },
                        new
                        {
                            Id = new Guid("3bb3b4d4-3e88-4ddc-b972-9a02c005f637"),
                            ScheduleId = new Guid("1452eef9-d47f-48ce-bea6-8bc0ec775f5e"),
                            TraineeId = new Guid("44ea1e99-19e1-4d88-80f7-3d13cad88c5c")
                        },
                        new
                        {
                            Id = new Guid("576dea69-a564-4f60-99b4-b2643eeff00c"),
                            ScheduleId = new Guid("c4d374b1-c657-4f03-a46c-2c725f630375"),
                            TraineeId = new Guid("10d01292-4c4a-46b3-a1d7-e87212c0a87b")
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfTrainees")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("GroupSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47d1b94a-1e4b-4ae4-986d-60298849b1c7"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CountOfTrainees = 1,
                            EndTime = new DateTime(2023, 8, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 8, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ae048160-36c5-4dbb-ba0d-83854fa3f338"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 22, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 22, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("44312107-bbbd-422b-b54b-25a0db36f3b5"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 11, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 11, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3d254f93-f684-4536-8dc4-523dd7e69794"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 16, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3526d1c6-f63a-42c6-ae60-1dd97e3434a0"),
                            ActivityId = new Guid("25b00a8d-13b9-4c33-a145-96b89264d699"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 25, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6d88f805-232d-4ce4-a05f-a62da3a02474"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CountOfTrainees = 1,
                            EndTime = new DateTime(2023, 8, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("abd78db4-0a0d-466c-a14d-4f1c6da8bfb0"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CountOfTrainees = 1,
                            EndTime = new DateTime(2023, 8, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 10, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bccaca62-a573-47e1-b815-0569bf15dd70"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 17, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e499d6b0-a852-4b37-9334-fc5f8c4aa69c"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 21, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 21, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c8030e8-e724-4470-adbf-e343a80566a2"),
                            ActivityId = new Guid("6d6ee926-6fa3-43a7-8bac-dc86632094a5"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 28, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("296e3b96-8ad1-4ceb-847c-331444d36016"),
                            ActivityId = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 22, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1452eef9-d47f-48ce-bea6-8bc0ec775f5e"),
                            ActivityId = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850"),
                            CountOfTrainees = 2,
                            EndTime = new DateTime(2023, 8, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 28, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4d374b1-c657-4f03-a46c-2c725f630375"),
                            ActivityId = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850"),
                            CountOfTrainees = 2,
                            EndTime = new DateTime(2023, 8, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 29, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a8ba6cc6-2e6d-4709-ab9b-bc4c4024e29b"),
                            ActivityId = new Guid("436818ef-d86c-4e43-88ca-29ff34ad5850"),
                            CountOfTrainees = 0,
                            EndTime = new DateTime(2023, 8, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 8, 30, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.IndividualTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Intensity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IndividualTrainings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88034cb7-c971-4520-a3a1-d48099502562"),
                            EndTime = new DateTime(2023, 8, 23, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Intensity = "Low",
                            IsCanceled = false,
                            StartTime = new DateTime(2023, 8, 23, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("17e17c3c-ba43-44bb-9fe3-8ec50c4a8dca"),
                            EndTime = new DateTime(2023, 8, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Intensity = "High",
                            IsCanceled = false,
                            StartTime = new DateTime(2023, 8, 22, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5bd931f9-f5ca-472c-8c81-9f011118c0e5"),
                            EndTime = new DateTime(2023, 8, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Intensity = "High",
                            IsCanceled = false,
                            StartTime = new DateTime(2023, 8, 15, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("82a1b1c7-1b12-4973-a8c0-9720fe4255fc"),
                            EndTime = new DateTime(2023, 8, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Intensity = "Moderate",
                            IsCanceled = false,
                            StartTime = new DateTime(2023, 8, 17, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("922bf694-a4e1-4fbe-b508-8cbfa836600f"),
                            EndTime = new DateTime(2023, 8, 18, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Intensity = "Moderate",
                            IsCanceled = false,
                            StartTime = new DateTime(2023, 8, 18, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.IndividualTrainingTrainer", b =>
                {
                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainerId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("IndividualTrainingsTrainers");

                    b.HasData(
                        new
                        {
                            TrainerId = new Guid("7b785253-5315-49fe-9d0c-39a8935c6902"),
                            TrainingId = new Guid("88034cb7-c971-4520-a3a1-d48099502562")
                        },
                        new
                        {
                            TrainerId = new Guid("7b785253-5315-49fe-9d0c-39a8935c6902"),
                            TrainingId = new Guid("17e17c3c-ba43-44bb-9fe3-8ec50c4a8dca")
                        },
                        new
                        {
                            TrainerId = new Guid("d1079610-d657-4cea-bf9b-0fc1053a6ee8"),
                            TrainingId = new Guid("5bd931f9-f5ca-472c-8c81-9f011118c0e5")
                        },
                        new
                        {
                            TrainerId = new Guid("1495c1e6-c21d-4b6f-b64d-a47d0226f4fc"),
                            TrainingId = new Guid("82a1b1c7-1b12-4973-a8c0-9720fe4255fc")
                        },
                        new
                        {
                            TrainerId = new Guid("1495c1e6-c21d-4b6f-b64d-a47d0226f4fc"),
                            TrainingId = new Guid("922bf694-a4e1-4fbe-b508-8cbfa836600f")
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cb387f1-d0c1-4be2-9cc8-31cba24fdd7c"),
                            Age = 25,
                            Height = 1.74,
                            Level = "Intermediate",
                            UserId = new Guid("9f76fb38-94d6-4ba8-9069-fd078ca22ebf"),
                            Weight = 55.0
                        },
                        new
                        {
                            Id = new Guid("b6830fbd-a3e8-4465-a596-04565c4568bc"),
                            Age = 30,
                            Height = 1.8500000000000001,
                            Level = "Advanced",
                            UserId = new Guid("dbc5c34e-0e90-42c9-83db-9421948f8f44"),
                            Weight = 89.0
                        },
                        new
                        {
                            Id = new Guid("02f24448-29e7-48d1-ae7e-54282df6cc53"),
                            Age = 27,
                            Height = 1.8999999999999999,
                            Level = "Advanced",
                            UserId = new Guid("557c75b3-d089-46a0-9b71-c800aa685010"),
                            Weight = 95.0
                        },
                        new
                        {
                            Id = new Guid("5546a97c-3ed4-48b7-90c7-2c0d70159e28"),
                            Age = 36,
                            Height = 1.6699999999999999,
                            Level = "Beginner",
                            UserId = new Guid("aeba13bb-2b27-4b1b-b702-5fd482830491")
                        },
                        new
                        {
                            Id = new Guid("44ea1e99-19e1-4d88-80f7-3d13cad88c5c"),
                            Age = 20,
                            Level = "Beginner",
                            UserId = new Guid("3a0c980b-98fe-4e88-a95e-8926dd775c68")
                        },
                        new
                        {
                            Id = new Guid("10d01292-4c4a-46b3-a1d7-e87212c0a87b"),
                            Age = 38,
                            Height = 1.7,
                            Level = "Intermediate",
                            UserId = new Guid("ea4bb973-7977-455a-a92d-6a2cb1dfcca3"),
                            Weight = 62.0
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CountOfTrainees")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b785253-5315-49fe-9d0c-39a8935c6902"),
                            Bio = "Hello! I'm Remy Leroy, your energetic gym trainer. Passionate about helping clients reach fitness goals, I'll guide you with knowledge and motivation. Let's transform lives, one rep at a time!",
                            CountOfTrainees = 0,
                            Experience = 5,
                            UserId = new Guid("5f28263d-a630-4364-8267-75307568014f")
                        },
                        new
                        {
                            Id = new Guid("d1079610-d657-4cea-bf9b-0fc1053a6ee8"),
                            Bio = "Hey there! I'm Alexander, your dedicated fitness coach. With a mission to inspire a healthier lifestyle, I craft personalized workout routines and nutrition plans. Let's conquer challenges and unleash your potential!",
                            CountOfTrainees = 0,
                            Experience = 2,
                            UserId = new Guid("bcd3cb31-dc3a-4c20-ad5f-79324bb62443")
                        },
                        new
                        {
                            Id = new Guid("1495c1e6-c21d-4b6f-b64d-a47d0226f4fc"),
                            Bio = "Hi, I'm Sophia, your dynamic gym trainer. Passionate about guiding clients to a healthy life, I'll create personalized workout plans. From strength training to cardio, I'll motivate you to push boundaries. Let's achieve fitness goals together!",
                            CountOfTrainees = 0,
                            Experience = 4,
                            UserId = new Guid("0fa5eb44-0f0b-455c-bc32-ed60a57f875e")
                        },
                        new
                        {
                            Id = new Guid("3fcaa2a4-59e1-4af4-9146-6f30716f836c"),
                            Bio = "General trainer in this gym",
                            CountOfTrainees = 0,
                            Experience = 8,
                            UserId = new Guid("ba3a5230-8e32-4d72-bc27-def1a8ab665a")
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.TrainerCertification", b =>
                {
                    b.Property<Guid>("CertificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CertificationId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerCertifications");

                    b.HasData(
                        new
                        {
                            CertificationId = new Guid("abc5ab25-3e76-43cb-be4b-2b05b50e7893"),
                            TrainerId = new Guid("1495c1e6-c21d-4b6f-b64d-a47d0226f4fc")
                        },
                        new
                        {
                            CertificationId = new Guid("8d52ff35-fcfc-4385-ae23-a45be1db42f4"),
                            TrainerId = new Guid("7b785253-5315-49fe-9d0c-39a8935c6902")
                        },
                        new
                        {
                            CertificationId = new Guid("a108e18e-436d-4b80-b651-f06dc7dfc6fd"),
                            TrainerId = new Guid("3fcaa2a4-59e1-4af4-9146-6f30716f836c")
                        },
                        new
                        {
                            CertificationId = new Guid("5d8ce6bd-4def-4e06-beba-9beca0a08f94"),
                            TrainerId = new Guid("d1079610-d657-4cea-bf9b-0fc1053a6ee8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymHub.Data.Models.Enrollment", b =>
                {
                    b.HasOne("GymHub.Data.Models.Trainee", "Trainee")
                        .WithMany("Enrollments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.IndividualTraining", "IndividualTraining")
                        .WithMany("Enrollments")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndividualTraining");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupActivity", b =>
                {
                    b.HasOne("GymHub.Data.Models.ActivityCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupActivityTrainer", b =>
                {
                    b.HasOne("GymHub.Data.Models.GroupActivity", "GroupActivity")
                        .WithMany("GroupActivityTrainers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.Trainer", "Trainer")
                        .WithMany("GroupActivityTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupActivity");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupEnrollment", b =>
                {
                    b.HasOne("GymHub.Data.Models.GroupSchedule", "Schedule")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.Trainee", "Trainee")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupSchedule", b =>
                {
                    b.HasOne("GymHub.Data.Models.GroupActivity", "GroupActivity")
                        .WithMany("GroupSchedules")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupActivity");
                });

            modelBuilder.Entity("GymHub.Data.Models.IndividualTrainingTrainer", b =>
                {
                    b.HasOne("GymHub.Data.Models.Trainer", "Trainer")
                        .WithMany("IndividualTrainingTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.IndividualTraining", "IndividualTraining")
                        .WithMany("IndividualTrainingTrainer")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndividualTraining");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainee", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainer", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymHub.Data.Models.TrainerCertification", b =>
                {
                    b.HasOne("GymHub.Data.Models.Certification", "Certification")
                        .WithMany("TrainersCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.Trainer", "Trainer")
                        .WithMany("TrainerCertifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymHub.Data.Models.Certification", b =>
                {
                    b.Navigation("TrainersCertifications");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupActivity", b =>
                {
                    b.Navigation("GroupActivityTrainers");

                    b.Navigation("GroupSchedules");
                });

            modelBuilder.Entity("GymHub.Data.Models.GroupSchedule", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("GymHub.Data.Models.IndividualTraining", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("IndividualTrainingTrainer");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainee", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainer", b =>
                {
                    b.Navigation("GroupActivityTrainers");

                    b.Navigation("IndividualTrainingTrainer");

                    b.Navigation("TrainerCertifications");
                });
#pragma warning restore 612, 618
        }
    }
}
